// Generated by gencpp from file smart_city/WeatherServiceRequest.msg
// DO NOT EDIT!


#ifndef SMART_CITY_MESSAGE_WEATHERSERVICEREQUEST_H
#define SMART_CITY_MESSAGE_WEATHERSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <smart_city/GPSLocation.h>

namespace smart_city
{
template <class ContainerAllocator>
struct WeatherServiceRequest_
{
  typedef WeatherServiceRequest_<ContainerAllocator> Type;

  WeatherServiceRequest_()
    : gps()  {
    }
  WeatherServiceRequest_(const ContainerAllocator& _alloc)
    : gps(_alloc)  {
  (void)_alloc;
    }



   typedef  ::smart_city::GPSLocation_<ContainerAllocator>  _gps_type;
  _gps_type gps;





  typedef boost::shared_ptr< ::smart_city::WeatherServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::smart_city::WeatherServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct WeatherServiceRequest_

typedef ::smart_city::WeatherServiceRequest_<std::allocator<void> > WeatherServiceRequest;

typedef boost::shared_ptr< ::smart_city::WeatherServiceRequest > WeatherServiceRequestPtr;
typedef boost::shared_ptr< ::smart_city::WeatherServiceRequest const> WeatherServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::smart_city::WeatherServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::smart_city::WeatherServiceRequest_<ContainerAllocator1> & lhs, const ::smart_city::WeatherServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.gps == rhs.gps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::smart_city::WeatherServiceRequest_<ContainerAllocator1> & lhs, const ::smart_city::WeatherServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace smart_city

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::smart_city::WeatherServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::smart_city::WeatherServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::smart_city::WeatherServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ab89b0cff2505ac42fd099e2fe894eb";
  }

  static const char* value(const ::smart_city::WeatherServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ab89b0cff2505acULL;
  static const uint64_t static_value2 = 0x42fd099e2fe894ebULL;
};

template<class ContainerAllocator>
struct DataType< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_city/WeatherServiceRequest";
  }

  static const char* value(const ::smart_city::WeatherServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "smart_city/GPSLocation gps\n"
"\n"
"================================================================================\n"
"MSG: smart_city/GPSLocation\n"
"float64 latitude\n"
"float64 longitude\n"
;
  }

  static const char* value(const ::smart_city::WeatherServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WeatherServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::smart_city::WeatherServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::smart_city::WeatherServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "gps: ";
    s << std::endl;
    Printer< ::smart_city::GPSLocation_<ContainerAllocator> >::stream(s, indent + "  ", v.gps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SMART_CITY_MESSAGE_WEATHERSERVICEREQUEST_H
